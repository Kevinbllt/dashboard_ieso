import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from filter import apply_filters, compute_average_by_hour, sort_and_extract_top, build_statistics

# ======= CONFIG =======
st.set_page_config(page_title="Statistics", layout="wide")
st.title("ğŸ“Š Statistics Summary")

# ======= LOAD DATA FROM GCP =======
gcp_url = "https://storage.googleapis.com/ieso_monitoring_market_data/energy/processed/energy_historical_hourly.csv.gz"
df = pd.read_csv(gcp_url, compression="gzip", parse_dates=["Date"])
hourly_bool = True

# ======= SIMPLE DATE FILTER =======
st.sidebar.header("ğŸ“… Date Filter")

min_date, max_date = df["Date"].min(), df["Date"].max()
date_range = st.sidebar.date_input("Select a date range", [min_date, max_date])

if len(date_range) == 2:
    start_date, end_date = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
else:
    start_date = end_date = pd.to_datetime(date_range[0])

# ======= FILTERED DATAFRAME =======
df_filtered = df[(df["Date"] >= start_date) & (df["Date"] <= end_date)]

if df_filtered.empty:
    st.warning("No data in selected date range.")
    st.stop()

# ======= BUILD STATISTICS =======
stats_dict = build_statistics(df_filtered)

# ======= SELECTORS =======
col1, col2 = st.columns(2)

with col1:
    mode = st.selectbox("Choose type", ["Low", "High"])

with col2:
    metric = st.selectbox("Choose metric", [
        "LMP_Day_Ahead",
        "LMP_Real_Time",
        "spread_4h_Day_Ahead",
        "spread_4h_Real_Time",
        "spread_Day_Ahead_vs_Real_Time"
    ])

key = f"{mode.lower()}_{metric}"
df_to_plot = stats_dict.get(key)

# ======= PLOT =======
ascending = True if mode == "Low" else False
df_sorted = df_to_plot.sort_values(by=metric, ascending=ascending)
category_order = df_sorted["Pricing Location"].tolist()

# ğŸ”¥ ajuster les couleurs en fonction du visuel
values = df_sorted[metric]
colors = values[::-1] if mode == "Low" else values

fig = go.Figure(go.Bar(
    x=values,
    y=df_sorted["Pricing Location"],
    orientation="h",
    text=[f"{v:.2f}" for v in values],
    textposition="inside",
    insidetextanchor="start",
    marker=dict(
        color=colors,
        colorscale='Blues' if mode == "Low" else 'Reds',
        reversescale=False,
        colorbar=dict(title=metric)
    )
))

fig.update_layout(
    xaxis_title=metric,
    yaxis_title="",
    yaxis=dict(
        categoryorder="array",
        categoryarray=category_order[::-1]
    ),
    height=450,
    showlegend=False,
    margin=dict(l=40, r=20, t=20, b=40),
    plot_bgcolor="rgba(0,0,0,0)"
)

st.plotly_chart(fig, use_container_width=True)
